use base64::prelude::*;
use dcap::get_collateral;
use dcap_qvl::{verify, QuoteCollateralV3};
use hex::{decode, encode};
use near_sdk::{
    env::{self, block_timestamp, sha256},
    log, near, require,
    store::IterableMap,
    AccountId, PanicOnDefault,
};

mod dcap;
mod utils;

#[near(contract_state)]
#[derive(PanicOnDefault)]
pub struct Contract {
    pub owner_id: AccountId,
    pub collateral_by_hash: IterableMap<String, QuoteCollateralV3>,
}

#[near]
impl Contract {
    #[init]
    #[private]
    pub fn init(owner_id: AccountId) -> Self {
        Self {
            owner_id,
            collateral_by_hash: IterableMap::new(b"a"),
        }
    }

    // owner methods

    pub fn owner_only(&mut self) {
        require!(env::predecessor_account_id() == self.owner_id);
        log!("hello owner");
    }

    // store collateral

    pub fn add_collateral(&mut self, raw_tcb_info: String) {
        require!(env::predecessor_account_id() == self.owner_id);

        let hash = encode(sha256(raw_tcb_info.as_bytes()));
        let collateral = get_collateral(raw_tcb_info);

        self.collateral_by_hash.insert(hash, collateral);
    }

    // store collatral

    pub fn verify_quote(&mut self, hash: String) {
        let collateral = self.collateral_by_hash.get(&hash).unwrap();
        let quote_64 = "AwACAAAAAAAKAA8Ak5pyM/ecTKmUCg2zlX8GBzmHYi7mlopUl3yGJu9HEjUAAAAACwsaGP//BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAADnAAAAAAAAADPYc223Vu1Jl+BLo1jSeDMYjxky/3sdFWkE0/VgRS+7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBX0LxHPZEMMMLq3gWullqHaATDDsCi2cxM6Zs+aPg5gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIZWxsbywgd29ybGQhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAG3dlQKjCT0ivynPBmLW6VL8fp9ASCzQ3mwhgWmv9/aJKU0FGO1ChWU2hen6/kBkO0WJshkHtkz8lCe6VCORLXfc4rkf7NL6JVRtQcHVDG0h4orgRCFT0JKlBf1LArm9OVLm6QwkBdPjSe7x/VhQhA4r6DvE/mWRcdYVCF9y1Xt/CwsaGP//BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAAAAAADnAAAAAAAAAJazR6ZOWgReJzacJubc2lH9fIUOmzo6eecY9DJh3uHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMT1d115ZQPpYTf3fGioKaAFasje1wFAsIGwlEkMV7/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCYbuILlQqqNf56ZoA78sRzy7mb6nGhh+SMNP4A6J1/QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv7CnWcyGTogZ8bfSar3ndjGBbiTNwC8kqphv1AfMg5hFzhW6fCrrDm0WiNoZ9aOSxQwFr4xsT2ItCOoWt7crRyAAAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8FANwNAAAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRWpUQ0NCRFNnQXdJQkFnSVZBSUczZHpLM1llbU91YmxqcEt2UjVibS9YZGpXTUFvR0NDcUdTTTQ5QkFNQwpNSEV4SXpBaEJnTlZCQU1NR2tsdWRHVnNJRk5IV0NCUVEwc2dVSEp2WTJWemMyOXlJRU5CTVJvd0dBWURWUVFLCkRCRkpiblJsYkNCRGIzSndiM0poZEdsdmJqRVVNQklHQTFVRUJ3d0xVMkZ1ZEdFZ1EyeGhjbUV4Q3pBSkJnTlYKQkFnTUFrTkJNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHlNekE1TWpBeU1UVXpORE5hRncwek1EQTVNakF5TVRVegpORE5hTUhBeElqQWdCZ05WQkFNTUdVbHVkR1ZzSUZOSFdDQlFRMHNnUTJWeWRHbG1hV05oZEdVeEdqQVlCZ05WCkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0cKQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQprZ21FN04zRCtSc3B5YUNaMllvRFRMREN1aDVwbnZBdTRjclBuMnVBR3VqcTl0T2d3VTgveTdqdHRTaENCNjAzClU2citoOWF5T2syblo5amV3azI1bHFPQ0FxZ3dnZ0trTUI4R0ExVWRJd1FZTUJhQUZORG9xdHAxMS9rdVNSZVkKUEhzVVpkRFY4bGxOTUd3R0ExVWRId1JsTUdNd1lhQmZvRjJHVzJoMGRIQnpPaTh2WVhCcExuUnlkWE4wWldSegpaWEoyYVdObGN5NXBiblJsYkM1amIyMHZjMmQ0TDJObGNuUnBabWxqWVhScGIyNHZkalF2Y0dOclkzSnNQMk5oClBYQnliMk5sYzNOdmNpWmxibU52WkdsdVp6MWtaWEl3SFFZRFZSME9CQllFRklXNEtYMjYzUFJ4WUphaDJDZmoKQWxyY3ZBQzlNQTRHQTFVZER3RUIvd1FFQXdJR3dEQU1CZ05WSFJNQkFmOEVBakFBTUlJQjFBWUpLb1pJaHZoTgpBUTBCQklJQnhUQ0NBY0V3SGdZS0tvWklodmhOQVEwQkFRUVEwRTdBYlU1dGt0eVEwSzA4OWU0dDN6Q0NBV1FHCkNpcUdTSWI0VFFFTkFRSXdnZ0ZVTUJBR0N5cUdTSWI0VFFFTkFRSUJBZ0VMTUJBR0N5cUdTSWI0VFFFTkFRSUMKQWdFTE1CQUdDeXFHU0liNFRRRU5BUUlEQWdFQ01CQUdDeXFHU0liNFRRRU5BUUlFQWdFQ01CRUdDeXFHU0liNApUUUVOQVFJRkFnSUEvekFRQmdzcWhraUcrRTBCRFFFQ0JnSUJBVEFRQmdzcWhraUcrRTBCRFFFQ0J3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNDQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNDUUlCQURBUUJnc3Foa2lHK0UwQkRRRUMKQ2dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDQ3dJQkFEQVFCZ3NxaGtpRytFMEJEUUVDREFJQkFEQVFCZ3NxaGtpRworRTBCRFFFQ0RRSUJBREFRQmdzcWhraUcrRTBCRFFFQ0RnSUJBREFRQmdzcWhraUcrRTBCRFFFQ0R3SUJBREFRCkJnc3Foa2lHK0UwQkRRRUNFQUlCQURBUUJnc3Foa2lHK0UwQkRRRUNFUUlCRFRBZkJnc3Foa2lHK0UwQkRRRUMKRWdRUUN3c0NBdjhCQUFBQUFBQUFBQUFBQURBUUJnb3Foa2lHK0UwQkRRRURCQUlBQURBVUJnb3Foa2lHK0UwQgpEUUVFQkFZQW9HY1JBQUF3RHdZS0tvWklodmhOQVEwQkJRb0JBREFLQmdncWhrak9QUVFEQWdOSEFEQkVBaUJtClNNWkV0bFFFam5aZ0dhMTkyVzNBcm5aM2l5WTZja00vc1RzWHhDUm1KZ0lnTGYyMHRaSE53M2ExYjMxSkRTT1cKRTZ3ZXN4b0FtVGVxSkdScVpsNjIxcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNtRENDQWo2Z0F3SUJBZ0lWQU5Eb3F0cDExL2t1U1JlWVBIc1VaZERWOGxsTk1Bb0dDQ3FHU000OUJBTUMKTUdneEdqQVlCZ05WQkFNTUVVbHVkR1ZzSUZOSFdDQlNiMjkwSUVOQk1Sb3dHQVlEVlFRS0RCRkpiblJsYkNCRApiM0p3YjNKaGRHbHZiakVVTUJJR0ExVUVCd3dMVTJGdWRHRWdRMnhoY21FeEN6QUpCZ05WQkFnTUFrTkJNUXN3CkNRWURWUVFHRXdKVlV6QWVGdzB4T0RBMU1qRXhNRFV3TVRCYUZ3MHpNekExTWpFeE1EVXdNVEJhTUhFeEl6QWgKQmdOVkJBTU1Ha2x1ZEdWc0lGTkhXQ0JRUTBzZ1VISnZZMlZ6YzI5eUlFTkJNUm93R0FZRFZRUUtEQkZKYm5SbApiQ0JEYjNKd2IzSmhkR2x2YmpFVU1CSUdBMVVFQnd3TFUyRnVkR0VnUTJ4aGNtRXhDekFKQmdOVkJBZ01Ba05CCk1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTDlxK05NcDJJT2cKdGRsMWJrL3VXWjUrVEdRbThhQ2k4ejc4ZnMrZktDUTNkK3VEelhuVlRBVDJaaERDaWZ5SXVKd3ZOM3dOQnA5aQpIQlNTTUpNSnJCT2pnYnN3Z2Jnd0h3WURWUjBqQkJnd0ZvQVVJbVVNMWxxZE5JbnpnN1NWVXI5UUd6a25CcXd3ClVnWURWUjBmQkVzd1NUQkhvRVdnUTRaQmFIUjBjSE02THk5alpYSjBhV1pwWTJGMFpYTXVkSEoxYzNSbFpITmwKY25acFkyVnpMbWx1ZEdWc0xtTnZiUzlKYm5SbGJGTkhXRkp2YjNSRFFTNWtaWEl3SFFZRFZSME9CQllFRk5EbwpxdHAxMS9rdVNSZVlQSHNVWmREVjhsbE5NQTRHQTFVZER3RUIvd1FFQXdJQkJqQVNCZ05WSFJNQkFmOEVDREFHCkFRSC9BZ0VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFDSmdUYnRWcU95WjFtM2pxaUFYTTZRWWE2cjVzV1MKNHkvRzd5OHVJSkd4ZHdJZ1JxUHZCU0t6elFhZ0JMUXE1czVBNzBwZG9pYVJKOHovMHVEejROZ1Y5MWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNqekNDQWpTZ0F3SUJBZ0lVSW1VTTFscWROSW56ZzdTVlVyOVFHemtuQnF3d0NnWUlLb1pJemowRUF3SXcKYURFYU1CZ0dBMVVFQXd3UlNXNTBaV3dnVTBkWUlGSnZiM1FnUTBFeEdqQVlCZ05WQkFvTUVVbHVkR1ZzSUVOdgpjbkJ2Y21GMGFXOXVNUlF3RWdZRFZRUUhEQXRUWVc1MFlTQkRiR0Z5WVRFTE1Ba0dBMVVFQ0F3Q1EwRXhDekFKCkJnTlZCQVlUQWxWVE1CNFhEVEU0TURVeU1URXdORFV4TUZvWERUUTVNVEl6TVRJek5UazFPVm93YURFYU1CZ0cKQTFVRUF3d1JTVzUwWld3Z1UwZFlJRkp2YjNRZ1EwRXhHakFZQmdOVkJBb01FVWx1ZEdWc0lFTnZjbkJ2Y21GMAphVzl1TVJRd0VnWURWUVFIREF0VFlXNTBZU0JEYkdGeVlURUxNQWtHQTFVRUNBd0NRMEV4Q3pBSkJnTlZCQVlUCkFsVlRNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVDNm5Fd01ESVlaT2ovaVBXc0N6YUVLaTcKMU9pT1NMUkZoV0dqYm5CVkpmVm5rWTR1M0lqa0RZWUwwTXhPNG1xc3lZamxCYWxUVll4RlAyc0pCSzV6bEtPQgp1ekNCdURBZkJnTlZIU01FR0RBV2dCUWlaUXpXV3AwMGlmT0R0SlZTdjFBYk9TY0dyREJTQmdOVkhSOEVTekJKCk1FZWdSYUJEaGtGb2RIUndjem92TDJObGNuUnBabWxqWVhSbGN5NTBjblZ6ZEdWa2MyVnlkbWxqWlhNdWFXNTAKWld3dVkyOXRMMGx1ZEdWc1UwZFlVbTl2ZEVOQkxtUmxjakFkQmdOVkhRNEVGZ1FVSW1VTTFscWROSW56ZzdTVgpVcjlRR3prbkJxd3dEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRRXdDZ1lJCktvWkl6ajBFQXdJRFNRQXdSZ0loQU9XLzVRa1IrUzlDaVNEY05vb3dMdVBSTHNXR2YvWWk3R1NYOTRCZ3dUd2cKQWlFQTRKMGxySG9NcytYbzVvL3NYNk85UVd4SFJBdlpVR09kUlE3Y3ZxUlhhcUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KAA==";
        let quote = BASE64_STANDARD.decode(quote_64).unwrap();

        let now = block_timestamp() / 1000000000;

        let result = verify::verify(&quote, &collateral, now);
        log!("{:?}", result);
    }
}
